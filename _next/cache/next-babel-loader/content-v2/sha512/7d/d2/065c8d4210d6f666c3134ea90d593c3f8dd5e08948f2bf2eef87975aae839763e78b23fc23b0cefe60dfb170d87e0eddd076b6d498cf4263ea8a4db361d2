{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Col, Row, Media, Button, Spinner } from 'reactstrap';\nimport Menu2 from '../../../public/assets/images/mega-menu/2.jpg';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport FilterContext from '../../../helpers/filter/FilterContext';\nimport ProductItem from '../../../components/common/product-box/ProductBox1';\nimport { CurrencyContext } from '../../../helpers/Currency/CurrencyContext';\nimport { useRouter } from 'next/router';\nimport PostLoader from '../../../components/common/PostLoader';\nimport CartContext from '../../../helpers/cart';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\nimport FilterPage from './filter';\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!,$color:String!,$brand:[String!]!,$sortBy:_SortBy!,$priceMax:Int!,$priceMin:Int!) {\n        products (type: $type ,indexFrom:$indexFrom ,limit:$limit ,color:$color ,brand:$brand ,sortBy:$sortBy ,priceMax:$priceMax,priceMin:$priceMin){\n            total\n            hasMore\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\nconst Popupsidebar = ({\n  colClass,\n  layoutList\n}) => {\n  const cartContext = useContext(CartContext);\n  const quantity = cartContext.quantity;\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const router = useRouter();\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(8);\n  const {\n    0: indexOf,\n    1: setIndexOf\n  } = useState(0);\n  const curContext = useContext(CurrencyContext);\n  const {\n    0: grid,\n    1: setGrid\n  } = useState(colClass);\n  const symbol = curContext.state.symbol;\n  const filterContext = useContext(FilterContext);\n  const filterChecked = filterContext.filterChecked;\n  const isChecked = filterContext.isChecked;\n  const selectedBrands = filterContext.selectedBrands;\n  const selectedColor = filterContext.selectedColor;\n  const selectedPrice = filterContext.selectedPrice;\n  const selectedCategory = filterContext.state;\n  const selectedSize = filterContext.selectedSize;\n  const {\n    0: sortBy,\n    1: setSortBy\n  } = useState('AscOrder');\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: layout,\n    1: setLayout\n  } = useState(layoutList);\n  const {\n    0: openFilter,\n    1: setOpenFilter\n  } = useState(false);\n  const {\n    0: sidebarView,\n    1: setSidebarView\n  } = useState(false);\n  var {\n    loading,\n    data,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: selectedCategory,\n      priceMax: selectedPrice.max,\n      priceMin: selectedPrice.min,\n      color: selectedColor,\n      brand: selectedBrands,\n      sortBy: sortBy,\n      indexFrom: 0,\n      limit: limit\n    }\n  });\n\n  const handlePagination = () => {\n    setIsLoading(true);\n    setTimeout(() => fetchMore({\n      variables: {\n        indexFrom: data.products.items.length\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) return prev;\n        setIsLoading(false);\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            total: prev.products.total,\n            items: [...prev.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    }), 1000);\n  };\n\n  const openNav = () => {\n    if (sidebarView) {\n      setSidebarView(!sidebarView);\n    } else {\n      setSidebarView(!sidebarView);\n    }\n  };\n\n  const removeBrand = val => {\n    const temp = [...selectedBrands];\n    temp.splice(selectedBrands.indexOf(val), 1);\n    filterContext.setSelectedBrands(temp);\n  };\n\n  const removeSize = val => {\n    const temp = [...selectedSize];\n    temp.splice(selectedSize.indexOf(val), 1);\n    filterContext.setSelectedSize(temp);\n  };\n\n  const removeColor = () => {\n    filterContext.setSelectedColor(\"\");\n  };\n\n  useEffect(() => {}, [selectedBrands, selectedColor, selectedSize, selectedPrice]);\n  return __jsx(Col, {\n    className: \"collection-content\"\n  }, __jsx(\"div\", {\n    className: \"page-main-content\"\n  }, __jsx(Row, null, __jsx(Col, {\n    sm: \"12\"\n  }, __jsx(\"div\", {\n    className: \"top-banner-wrapper\"\n  }, __jsx(\"a\", {\n    href: null\n  }, __jsx(Media, {\n    src: Menu2,\n    className: \"img-fluid\",\n    alt: \"\"\n  })), __jsx(\"div\", {\n    className: \"top-banner-content small-section\"\n  }, __jsx(\"h4\", null, \"fashion\"), __jsx(\"h5\", null, \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\"), __jsx(\"p\", null, \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"))), __jsx(Row, null, __jsx(Col, {\n    xs: \"12\"\n  }, __jsx(\"ul\", {\n    className: \"product-filter-tags\"\n  }, selectedBrands.map((brand, i) => __jsx(\"li\", {\n    key: i\n  }, __jsx(\"a\", {\n    href: null,\n    className: \"filter_tag\"\n  }, brand, __jsx(\"i\", {\n    className: \"fa fa-close\",\n    onClick: () => removeBrand(brand)\n  })))), selectedColor ? __jsx(\"li\", null, __jsx(\"a\", {\n    href: null,\n    className: \"filter_tag\"\n  }, selectedColor, __jsx(\"i\", {\n    className: \"fa fa-close\",\n    onClick: removeColor\n  }))) : '', selectedSize.map((size, i) => __jsx(\"li\", {\n    key: i\n  }, __jsx(\"a\", {\n    href: null,\n    className: \"filter_tag\"\n  }, size, __jsx(\"i\", {\n    className: \"fa fa-close\",\n    onClick: () => removeSize(size)\n  })))), __jsx(\"li\", null, __jsx(\"a\", {\n    href: null,\n    className: \"filter_tag\"\n  }, \"price: \", selectedPrice.min, \"- \", selectedPrice.max))))), __jsx(\"div\", {\n    className: \"collection-product-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"product-top-filter\"\n  }, __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n    className: \"popup-filter\"\n  }, __jsx(\"div\", {\n    className: \"sidebar-popup\",\n    onClick: () => openNav(sidebarView)\n  }, __jsx(\"a\", {\n    className: \"popup-btn\"\n  }, \"filter products\")), __jsx(\"div\", {\n    id: \"filterpopup\",\n    className: `open-popup ${sidebarView ? 'open' : ''}`\n  }, __jsx(FilterPage, {\n    sidebarView: sidebarView,\n    closeSidebar: () => openNav(sidebarView)\n  })), __jsx(\"div\", {\n    className: \"collection-view\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"i\", {\n    className: \"fa fa-th grid-layout-view\",\n    onClick: () => {\n      setLayout('');\n      setGrid('col-lg-3');\n    }\n  })), __jsx(\"li\", null, __jsx(\"i\", {\n    className: \"fa fa-list-ul list-layout-view\",\n    onClick: () => {\n      setLayout('list-view');\n      setGrid('col-lg-12');\n    }\n  })))), __jsx(\"div\", {\n    className: \"collection-grid-view\",\n    style: layout === 'list-view' ? {\n      'opacity': 0\n    } : {\n      'opacity': 1\n    }\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(Media, {\n    src: `/assets/images/icon/2.png`,\n    alt: \"\",\n    className: \"product-2-layout-view\",\n    onClick: () => setGrid('col-lg-6')\n  })), __jsx(\"li\", null, __jsx(Media, {\n    src: `/assets/images/icon/3.png`,\n    alt: \"\",\n    className: \"product-3-layout-view\",\n    onClick: () => setGrid('col-lg-4')\n  })), __jsx(\"li\", null, __jsx(Media, {\n    src: `/assets/images/icon/4.png`,\n    alt: \"\",\n    className: \"product-4-layout-view\",\n    onClick: () => setGrid('col-lg-3')\n  })), __jsx(\"li\", null, __jsx(Media, {\n    src: `/assets/images/icon/6.png`,\n    alt: \"\",\n    className: \"product-6-layout-view\",\n    onClick: () => setGrid('col-lg-2')\n  })))), __jsx(\"div\", {\n    className: \"product-page-per-view\"\n  }, __jsx(\"select\", {\n    onChange: e => setLimit(parseInt(e.target.value))\n  }, __jsx(\"option\", {\n    value: \"10\"\n  }, \"10 Products Par Page\"), __jsx(\"option\", {\n    value: \"15\"\n  }, \"15 Products Par Page\"), __jsx(\"option\", {\n    value: \"20\"\n  }, \"20 Products Par Page\"))), __jsx(\"div\", {\n    className: \"product-page-filter\"\n  }, __jsx(\"select\", {\n    onChange: e => setSortBy(e.target.value)\n  }, __jsx(\"option\", {\n    value: \"AscOrder\"\n  }, \"Sorting items\"), __jsx(\"option\", {\n    value: \"HighToLow\"\n  }, \"High To Low\"), __jsx(\"option\", {\n    value: \"LowToHigh\"\n  }, \"Low To High\"), __jsx(\"option\", {\n    value: \"Newest\"\n  }, \"Newest\"), __jsx(\"option\", {\n    value: \"AscOrder\"\n  }, \"Asc Order\"), __jsx(\"option\", {\n    value: \"DescOrder\"\n  }, \"Desc Order\"))))))), __jsx(\"div\", {\n    className: `product-wrapper-grid ${layout}`\n  }, __jsx(Row, null, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? data && data.products && data.products.items && data.products.items.length === 0 ? __jsx(Col, {\n    xs: \"12\"\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"col-sm-12 empty-cart-cls text-center\"\n  }, __jsx(\"img\", {\n    src: `/assets/images/empty-search.jpg`,\n    className: \"img-fluid mb-4 mx-auto\",\n    alt: \"\"\n  }), __jsx(\"h3\", null, __jsx(\"strong\", null, \"Your Cart is Empty\")), __jsx(\"h4\", null, \"Explore more shortlist some items.\")))) : __jsx(\"div\", {\n    className: \"row mx-0 mt-3 margin-default\"\n  }, __jsx(\"div\", {\n    className: \"col-xl-3 col-lg-4 col-6\"\n  }, __jsx(PostLoader, null)), __jsx(\"div\", {\n    className: \"col-xl-3 col-lg-4 col-6\"\n  }, __jsx(PostLoader, null)), __jsx(\"div\", {\n    className: \"col-xl-3 col-lg-4 col-6\"\n  }, __jsx(PostLoader, null)), __jsx(\"div\", {\n    className: \"col-xl-3 col-lg-4 col-6\"\n  }, __jsx(PostLoader, null))) : data && data.products.items.map((product, i) => __jsx(\"div\", {\n    className: grid,\n    key: i\n  }, __jsx(\"div\", {\n    className: \"product\"\n  }, __jsx(\"div\", null, __jsx(ProductItem, {\n    des: true,\n    product: product,\n    symbol: symbol,\n    addCompare: () => compareContext.addToCompare(product),\n    addWishlist: () => wishlistContext.addToWish(product),\n    cartClass: \"cart-info cart-wrap\",\n    addCart: () => cartContext.addToCart(product, quantity)\n  }))))))), __jsx(\"div\", {\n    className: \"section-t-space\"\n  }, __jsx(\"div\", {\n    className: \"text-center\"\n  }, __jsx(Row, null, __jsx(Col, {\n    xl: \"12\",\n    md: \"12\",\n    sm: \"12\"\n  }, data && data.products && data.products.hasMore && __jsx(Button, {\n    onClick: () => handlePagination()\n  }, isLoading && __jsx(Spinner, {\n    animation: \"border\",\n    variant: \"light\"\n  }), \"Load More\"))))))))));\n};\n\nexport default Popupsidebar;","map":null,"metadata":{},"sourceType":"module"}