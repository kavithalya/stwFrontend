{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport SettingContext from './SettingContext';\nimport { config } from '../../components/customizer/config.json';\n\nconst SettingProvider = props => {\n  const {\n    0: layoutState,\n    1: setLayoutState\n  } = useState(\"RTL\");\n  const {\n    0: layoutColor,\n    1: setLayoutColor\n  } = useState(\"#ff4c3b\");\n\n  const layoutFun = item => {\n    if (item === \"RTL\") {\n      document.body.classList.remove(\"ltr\");\n      document.body.classList.add(\"rtl\");\n      setLayoutState(\"LTR\");\n    } else {\n      document.body.classList.remove(\"rtl\");\n      document.body.classList.add(\"ltr\");\n      setLayoutState(\"RTL\");\n    }\n  };\n\n  const layoutColorFun = item => {\n    localStorage.setItem(\"color\", item.target.value);\n    document.documentElement.style.setProperty('--theme-deafult', item.target.value);\n    config.color = item.target.value;\n    setLayoutColor(item.target.value);\n  };\n\n  return __jsx(SettingContext.Provider, {\n    value: _objectSpread(_objectSpread({}, props), {}, {\n      state: layoutState,\n      layoutFun: layoutFun,\n      layoutColorFun: layoutColorFun\n    })\n  }, props.children);\n};\n\nexport default SettingProvider;","map":null,"metadata":{},"sourceType":"module"}