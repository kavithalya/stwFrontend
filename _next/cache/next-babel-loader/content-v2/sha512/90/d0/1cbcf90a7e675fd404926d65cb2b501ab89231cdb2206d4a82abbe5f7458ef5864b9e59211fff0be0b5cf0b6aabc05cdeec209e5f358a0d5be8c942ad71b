{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useContext } from 'react';\nimport { Container } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport CartContext from '../../../helpers/cart';\nimport Masonry from 'react-masonry-css';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport ProductBox from '../product-box/ProductBox9';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\nconst ProductsCollection = ({\n  type,\n  col\n}) => {\n  const cartContext = useContext(CartContext);\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const quantity = cartContext.quantity;\n  var {\n    loading,\n    data\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20\n    }\n  });\n  return __jsx(Fragment, null, __jsx(\"section\", {\n    className: \"portfolio-section portfolio-padding metro-section port-col\"\n  }, __jsx(Container, {\n    fluid: col == 'full'\n  }, __jsx(Masonry, {\n    breakpointCols: col == 'metro' ? 4 : 6,\n    className: \"isotopeContainer row\",\n    columnClassName: `isotopeSelector ${col == 'metro' ? 'col-xl-3 col-sm-6' : 'col-xl-2 col-lg-3 col-md-4 col-sm-6'}`\n  }, data && data.products.items.slice(0, 20).map((product, index) => __jsx(ProductBox, {\n    product: product,\n    addCart: () => cartContext.addToCart(product, quantity),\n    addWish: () => wishlistContext.addToWish(product),\n    addCompare: () => compareContext.addToCompare(product),\n    key: index\n  }))))));\n};\n\nexport default ProductsCollection;","map":null,"metadata":{},"sourceType":"module"}