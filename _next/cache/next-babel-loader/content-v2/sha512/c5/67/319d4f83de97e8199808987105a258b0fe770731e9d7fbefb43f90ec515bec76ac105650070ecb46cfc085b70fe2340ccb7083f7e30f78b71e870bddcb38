{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useContext } from 'react';\nimport { TabList, TabPanel, Tabs, Tab } from 'react-tabs';\nimport { Col, Container, Row } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Slider from 'react-slick';\nimport ProductItem from '../product-box/ProductBox3';\nimport CartContext from '../../../helpers/cart/index';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\nimport { Product3 } from '../../../services/script';\nimport PostLoader from '../PostLoader';\nimport Background from '../../../public/assets/images/parallax/23.jpg';\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\nconst TabCollection = ({\n  type,\n  cartClass,\n  spanClass\n}) => {\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState(type);\n  const context = useContext(CartContext);\n  const wishListContext = useContext(WishlistContext);\n  const contextCompare = useContext(CompareContext);\n  const quatity = context.quatity;\n  var {\n    loading,\n    data\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: activeTab,\n      indexFrom: 0,\n      limit: 26\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"full-banner parallax tools-parallax-product tab-left ratio_square tools-grey border-box bg-size blur-up lazyloaded\",\n    style: {\n      backgroundImage: \"url(\" + Background + \")\"\n    }\n  }, __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, __jsx(Tabs, {\n    className: \"theme-tab\"\n  }, __jsx(\"div\", {\n    className: \"left-side\"\n  }, __jsx(\"div\", {\n    className: \"left-tab-title\"\n  }, __jsx(\"h4\", null, \"our shop\"), __jsx(\"h3\", null, \"Buy Marijuana\")), __jsx(TabList, {\n    className: \"tabs tab-title\"\n  }, __jsx(Tab, {\n    className: activeTab == type ? 'active' : '',\n    onClick: () => setActiveTab(type)\n  }, __jsx(\"a\", {\n    href: null\n  }, \"Cannabis Oils\")), __jsx(Tab, {\n    className: activeTab == 'marijuana' ? 'active' : '',\n    onClick: () => setActiveTab('marijuana')\n  }, __jsx(\"a\", {\n    href: null\n  }, \"pre rolls\")), __jsx(Tab, {\n    className: activeTab == 'marijuana' ? 'active' : '',\n    onClick: () => setActiveTab('marijuana')\n  }, __jsx(\"a\", {\n    href: null\n  }, \"marijuana edibles\")), __jsx(Tab, {\n    className: activeTab == 'marijuana' ? 'active' : '',\n    onClick: () => setActiveTab('marijuana')\n  }, __jsx(\"a\", {\n    href: null\n  }, \"marijuana weeds\")), __jsx(Tab, {\n    className: activeTab == 'marijuana' ? 'active' : '',\n    onClick: () => setActiveTab('marijuana')\n  }, __jsx(\"a\", {\n    href: null\n  }, \"CBD oils\")), __jsx(Tab, {\n    className: activeTab == 'marijuana' ? 'active' : '',\n    onClick: () => setActiveTab('marijuana')\n  }, __jsx(\"a\", {\n    href: null\n  }, \"marijuana seeds\")))), __jsx(\"div\", {\n    className: \"tab-content-cls\"\n  }, __jsx(TabPanel, {\n    id: \"tab-1\",\n    className: \"tab-content active default\"\n  }, __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(0, 5).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addCompare: () => contextCompare.addToCompare(product),\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))), __jsx(TabPanel, {\n    id: \"tab-2\",\n    className: \"tab-content\"\n  }, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? __jsx(React.Fragment, null, __jsx(PostLoader, null), __jsx(PostLoader, null), __jsx(PostLoader, null)) : __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(5, 10).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCompare: () => contextCompare.addToCompare(product),\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))), __jsx(TabPanel, {\n    id: \"tab-3\",\n    className: \"tab-content\"\n  }, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? __jsx(React.Fragment, null, __jsx(PostLoader, null), __jsx(PostLoader, null), __jsx(PostLoader, null)) : __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(10, 15).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCompare: () => contextCompare.addToCompare(product),\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))), __jsx(TabPanel, {\n    id: \"tab-4\",\n    className: \"tab-content \"\n  }, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? __jsx(React.Fragment, null, __jsx(PostLoader, null), __jsx(PostLoader, null), __jsx(PostLoader, null)) : __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(15, 20).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCompare: () => contextCompare.addToCompare(product),\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))), __jsx(TabPanel, {\n    id: \"tab-5\",\n    className: \"tab-content\"\n  }, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? __jsx(React.Fragment, null, __jsx(PostLoader, null), __jsx(PostLoader, null), __jsx(PostLoader, null)) : __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(20, 25).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCompare: () => contextCompare.addToCompare(product),\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))), __jsx(TabPanel, {\n    id: \"tab-6\",\n    className: \"tab-content\"\n  }, !data || !data.products || !data.products.items || data.products.items.length === 0 || loading ? __jsx(React.Fragment, null, __jsx(PostLoader, null), __jsx(PostLoader, null), __jsx(PostLoader, null)) : __jsx(Slider, _extends({}, Product3, {\n    className: \"product-3 product-m no-arrow\"\n  }), data && data.products.items.slice(0, 10).map((product, index) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCompare: () => contextCompare.addToCompare(product),\n    addCart: () => context.addToCart(product, quatity),\n    key: index,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartclassName: cartClass\n  })))))))))));\n};\n\nexport default TabCollection;","map":null,"metadata":{},"sourceType":"module"}