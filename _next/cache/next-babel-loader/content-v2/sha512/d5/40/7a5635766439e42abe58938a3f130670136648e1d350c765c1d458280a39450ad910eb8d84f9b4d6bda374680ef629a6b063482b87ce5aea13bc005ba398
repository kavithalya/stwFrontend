{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport { Container, Row, Col, Media } from 'reactstrap';\nimport Slider from 'react-slick';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport ImageZoom from '../common/image-zoom';\nimport DetailBox from '../common/detail-box';\nimport Detail from '../common/detailPage';\nimport { CurrencyContext } from '../../../helpers/Currency/CurrencyContext';\nconst GET_SINGLE_PRODUCTS = gql`\n    query product ($id:Int!) {\n        product (id:$id) {\n            id\n            title\n            description\n            type\n            brand\n            category \n            price\n            new\n            sale\n            discount\n            stock\n            variants\n            {\n                id\n                color\n                image_id\n                variant_id\n                size\n            }\n            images\n            {\n                image_id\n                src\n            }\n        }\n    }\n`;\n\nconst ThreeColRightPage = () => {\n  const curContext = useContext(CurrencyContext);\n  const symbol = curContext.state.symbol;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    nav1: null,\n    nav2: null\n  });\n  const slider1 = useRef();\n  const slider2 = useRef();\n  var {\n    loading,\n    data\n  } = useQuery(GET_SINGLE_PRODUCTS, {\n    variables: {\n      id: 1\n    }\n  });\n  var products = {\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    dots: false,\n    arrows: true,\n    fade: true\n  };\n  var productsnav = {\n    slidesToShow: 3,\n    swipeToSlide: true,\n    arrows: false,\n    dots: false,\n    focusOnSelect: true\n  };\n  useEffect(() => {\n    setState({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, [data]);\n\n  const changeColorVar = img_id => {\n    slider2.current.slickGoTo(img_id);\n  };\n\n  const {\n    nav1,\n    nav2\n  } = state;\n  return __jsx(\"section\", null, __jsx(\"div\", {\n    className: \"collection-wrapper\"\n  }, __jsx(Container, null, !data || !data.product || data.product.length === 0 || loading ? 'loading' : __jsx(Row, {\n    className: \"leftImage\"\n  }, __jsx(Col, {\n    lg: \"4\"\n  }, __jsx(Row, null, __jsx(Col, null, __jsx(Slider, _extends({}, products, {\n    asNavFor: nav2,\n    ref: slider => slider1.current = slider,\n    className: \"product-right-slick\"\n  }), data.product.variants ? data.product.images.map((vari, index) => __jsx(\"div\", {\n    key: index\n  }, __jsx(ImageZoom, {\n    image: vari\n  }))) : data.product.images.map((vari, index) => __jsx(\"div\", {\n    key: index\n  }, __jsx(ImageZoom, {\n    image: vari\n  })))))), __jsx(Row, null, __jsx(Col, {\n    xs: \"12\",\n    className: \"\"\n  }, __jsx(Slider, _extends({\n    className: \"slider-nav\"\n  }, productsnav, {\n    asNavFor: nav1,\n    ref: slider => slider2.current = slider\n  }), data.product.variants ? data.product.images.map((vari, index) => __jsx(\"div\", {\n    key: index\n  }, __jsx(Media, {\n    src: `${vari.src}`,\n    key: index,\n    alt: vari.alt,\n    className: \"img-fluid\"\n  }))) : '')))), __jsx(Col, {\n    lg: \"4\"\n  }, __jsx(Detail, {\n    item: data.product\n  })), __jsx(Col, {\n    lg: \"4\"\n  }, __jsx(DetailBox, {\n    symbol: symbol,\n    item: data.product,\n    changeColorVar: changeColorVar\n  }))))));\n};\n\nexport default ThreeColRightPage;","map":null,"metadata":{},"sourceType":"module"}