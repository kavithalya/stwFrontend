{"ast":null,"code":"import _defineProperty from \"C:/Mani/Office/Projects/Shoptheworld/STWCommerceFrontEnd/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Mani/Office/Projects/Shoptheworld/STWCommerceFrontEnd/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport FilterContext from './FilterContext';\nimport { useRouter } from 'next/router';\n\nvar FilterProvider = function FilterProvider(props) {\n  var router = useRouter();\n  var brand = router.query.brand;\n  var color = router.query.color;\n  var size = router.query.size;\n  var category = router.query.category;\n  var min = router.query.min;\n  var max = router.query.max;\n  var sizeParam = size ? size.split(\",\") : null;\n  var param = brand ? brand.split(\",\") : [];\n\n  var _useState = useState(category ? category : \"fashion\"),\n      selectedCategory = _useState[0],\n      setSelectedCategory = _useState[1];\n\n  var _useState2 = useState(param ? param : []),\n      selectedBrands = _useState2[0],\n      setSelectedBrands = _useState2[1];\n\n  var _useState3 = useState(color ? color : \"\"),\n      selectedColor = _useState3[0],\n      setSelectedColor = _useState3[1];\n\n  var _useState4 = useState(sizeParam ? sizeParam : []),\n      selectedSize = _useState4[0],\n      setSelectedSize = _useState4[1];\n\n  var _useState5 = useState({\n    min: min ? min : 0,\n    max: max ? max : 500\n  }),\n      selectedPrice = _useState5[0],\n      setSelectedPrice = _useState5[1];\n\n  var _useState6 = useState(true),\n      isChecked = _useState6[0],\n      setIsChecked = _useState6[1];\n\n  var _useState7 = useState([{}]),\n      filterChecked = _useState7[0],\n      setFilterChecked = _useState7[1];\n\n  var handleBrands = function handleBrands(brand, checked) {\n    var index = selectedBrands.indexOf(brand);\n\n    if (index > -1) {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        brand: brand,\n        checked: checked\n      }]);\n      setSelectedBrands(selectedBrands.filter(function (e) {\n        return e !== brand;\n      }));\n    } else {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        brand: brand,\n        checked: checked\n      }]);\n      setSelectedBrands([].concat(_toConsumableArray(selectedBrands), [brand]));\n    }\n  };\n\n  var handleSizes = function handleSizes(size, checked) {\n    var index = selectedSize.indexOf(size);\n\n    if (index > -1) {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        size: size,\n        checked: checked\n      }]);\n      setSelectedSize(selectedSize.filter(function (e) {\n        return e !== size;\n      }));\n    } else {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        size: size,\n        checked: checked\n      }]);\n      setSelectedSize([].concat(_toConsumableArray(selectedSize), [size]));\n    }\n  };\n\n  return __jsx(FilterContext.Provider, {\n    value: _objectSpread(_objectSpread({}, props), {}, {\n      state: selectedCategory,\n      setFilterChecked: setFilterChecked,\n      setSelectedColor: setSelectedColor,\n      setSelectedCategory: setSelectedCategory,\n      setSelectedBrands: setSelectedBrands,\n      selectedBrands: selectedBrands,\n      selectedColor: selectedColor,\n      selectedPrice: selectedPrice,\n      isChecked: isChecked,\n      filterChecked: filterChecked,\n      selectedSize: selectedSize,\n      setSelectedSize: setSelectedSize,\n      setSelectedPrice: setSelectedPrice,\n      handleBrands: handleBrands,\n      handleSizes: handleSizes\n    })\n  }, props.children);\n};\n\nexport default FilterProvider;","map":null,"metadata":{},"sourceType":"module"}