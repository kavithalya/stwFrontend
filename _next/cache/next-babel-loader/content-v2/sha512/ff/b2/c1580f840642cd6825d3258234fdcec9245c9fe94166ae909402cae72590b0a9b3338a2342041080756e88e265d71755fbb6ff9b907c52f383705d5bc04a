{"ast":null,"code":"var _jsxFileName = \"C:\\\\Mani\\\\Office\\\\Template\\\\StwEcommerce\\\\frontend\\\\components\\\\common\\\\Collections\\\\Collection12.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useContext } from 'react';\nimport { Container } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport CartContext from '../../../helpers/cart';\nimport Masonry from 'react-masonry-css';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport ProductBox from '../product-box/ProductBox9';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\nconst ProductsCollection = ({\n  type,\n  col\n}) => {\n  const cartContext = useContext(CartContext);\n  const wishlistContext = useContext(WishlistContext);\n  const compareContext = useContext(CompareContext);\n  const quantity = cartContext.quantity;\n  var {\n    loading,\n    data\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20\n    }\n  });\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(\"section\", {\n    className: \"portfolio-section portfolio-padding metro-section port-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, __jsx(Container, {\n    fluid: col == 'full',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, __jsx(Masonry, {\n    breakpointCols: col == 'metro' ? 4 : 6,\n    className: \"isotopeContainer row\",\n    columnClassName: `isotopeSelector ${col == 'metro' ? 'col-xl-3 col-sm-6' : 'col-xl-2 col-lg-3 col-md-4 col-sm-6'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, data && data.products.items.slice(0, 20).map((product, index) => __jsx(ProductBox, {\n    product: product,\n    addCart: () => cartContext.addToCart(product, quantity),\n    addWish: () => wishlistContext.addToWish(product),\n    addCompare: () => compareContext.addToCompare(product),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport default ProductsCollection;","map":{"version":3,"sources":["C:/Mani/Office/Template/StwEcommerce/frontend/components/common/Collections/Collection12.js"],"names":["React","Fragment","useContext","Container","useQuery","gql","CartContext","Masonry","WishlistContext","ProductBox","CompareContext","GET_PRODUCTS","ProductsCollection","type","col","cartContext","wishlistContext","compareContext","quantity","loading","data","variables","indexFrom","limit","products","items","slice","map","product","index","addToCart","addToWish","addToCompare"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AAEA,MAAMC,YAAY,GAAGN,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BA;;AAkCA,MAAMO,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAmB;AAC1C,QAAMC,WAAW,GAAGb,UAAU,CAACI,WAAD,CAA9B;AACA,QAAMU,eAAe,GAAGd,UAAU,CAACM,eAAD,CAAlC;AACA,QAAMS,cAAc,GAAGf,UAAU,CAACQ,cAAD,CAAjC;AACA,QAAMQ,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AAEA,MAAI;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBhB,QAAQ,CAACO,YAAD,EAAe;AAC3CU,IAAAA,SAAS,EAAE;AACPR,MAAAA,IAAI,EAAEA,IADC;AAEPS,MAAAA,SAAS,EAAE,CAFJ;AAGPC,MAAAA,KAAK,EAAE;AAHA;AADgC,GAAf,CAAhC;AAQA,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAS,IAAA,SAAS,EAAC,4DAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAET,GAAG,IAAE,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,OAAD;AACI,IAAA,cAAc,EAAEA,GAAG,IAAE,OAAL,GAAc,CAAd,GAAiB,CADrC;AAEI,IAAA,SAAS,EAAC,sBAFd;AAGI,IAAA,eAAe,EAAG,mBAAkBA,GAAG,IAAE,OAAL,GAAa,mBAAb,GAAkC,qCAAsC,EAHhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKM,IAAI,IAAIA,IAAI,CAACI,QAAL,CAAcC,KAAd,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,EAA7B,EAAiCC,GAAjC,CAAqC,CAACC,OAAD,EAAUC,KAAV,KAC1C,MAAC,UAAD;AAAY,IAAA,OAAO,EAAED,OAArB;AACI,IAAA,OAAO,EAAE,MAAMb,WAAW,CAACe,SAAZ,CAAsBF,OAAtB,EAA8BV,QAA9B,CADnB;AAEI,IAAA,OAAO,EAAE,MAAMF,eAAe,CAACe,SAAhB,CAA0BH,OAA1B,CAFnB;AAGI,IAAA,UAAU,EAAE,MAAMX,cAAc,CAACe,YAAf,CAA4BJ,OAA5B,CAHtB;AAG4D,IAAA,GAAG,EAAEC,KAHjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,CALb,CADJ,CADJ,CADJ,CADJ;AAqBH,CAnCD;;AAqCA,eAAejB,kBAAf","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport { Container } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport CartContext from '../../../helpers/cart';\nimport Masonry from 'react-masonry-css';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport ProductBox from '../product-box/ProductBox9';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\n\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\n\nconst ProductsCollection = ({ type, col }) => {\n    const cartContext = useContext(CartContext);\n    const wishlistContext = useContext(WishlistContext);\n    const compareContext = useContext(CompareContext);\n    const quantity = cartContext.quantity;\n\n    var { loading, data } = useQuery(GET_PRODUCTS, {\n        variables: {\n            type: type,\n            indexFrom: 0,\n            limit: 20\n        }\n    });\n\n    return (\n        <Fragment>\n            <section className=\"portfolio-section portfolio-padding metro-section port-col\">\n                <Container fluid={col=='full'}>\n                    <Masonry\n                        breakpointCols={col=='metro'? 4 :6}\n                        className=\"isotopeContainer row\"\n                        columnClassName={`isotopeSelector ${col=='metro'?'col-xl-3 col-sm-6': 'col-xl-2 col-lg-3 col-md-4 col-sm-6'}`}\n                    >\n                        {data && data.products.items.slice(0, 20).map((product, index) =>\n                            <ProductBox product={product}\n                                addCart={() => cartContext.addToCart(product,quantity)}\n                                addWish={() => wishlistContext.addToWish(product)}\n                                addCompare={() => compareContext.addToCompare(product)} key={index} />\n                        )}\n                    </Masonry>\n\n                </Container>\n            </section>\n        </Fragment>\n    )\n}\n\nexport default ProductsCollection;"]},"metadata":{},"sourceType":"module"}