{"ast":null,"code":"import _toConsumableArray from \"C:/Mani/Office/Projects/Shoptheworld/STWCommerceFrontEnd/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:/Mani/Office/Projects/Shoptheworld/STWCommerceFrontEnd/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport { toast } from 'react-toastify';\n\nvar getLocalCartItems = function getLocalCartItems() {\n  try {\n    var list = localStorage.getItem('cartList');\n\n    if (list === null) {\n      return [];\n    } else {\n      return JSON.parse(list);\n    }\n  } catch (err) {\n    return [];\n  }\n};\n\nvar CartProvider = function CartProvider(props) {\n  var _useState = useState(getLocalCartItems()),\n      cartItems = _useState[0],\n      setCartItems = _useState[1];\n\n  var _useState2 = useState(0),\n      cartTotal = _useState2[0],\n      setCartTotal = _useState2[1];\n\n  var _useState3 = useState(1),\n      quantity = _useState3[0],\n      setQuantity = _useState3[1];\n\n  var _useState4 = useState('InStock'),\n      stock = _useState4[0],\n      setStock = _useState4[1];\n\n  useEffect(function () {\n    var Total = cartItems.reduce(function (a, b) {\n      return +a + +b.total;\n    }, 0);\n    setCartTotal(Total);\n    localStorage.setItem('cartList', JSON.stringify(cartItems));\n  }, [cartItems]); // Add Product To Cart\n\n  var addToCart = function addToCart(item, quantity) {\n    toast.success(\"Product Added Successfully !\");\n    var index = cartItems.findIndex(function (itm) {\n      return itm.id === item.id;\n    });\n\n    if (index !== -1) {\n      var product = cartItems[index];\n      cartItems[index] = _objectSpread(_objectSpread(_objectSpread({}, item), item), {}, {\n        qty: quantity,\n        total: (item.price - item.price * item.discount / 100) * quantity\n      });\n      setCartItems(_toConsumableArray(cartItems));\n    } else {\n      var _product = _objectSpread(_objectSpread({}, item), {}, {\n        qty: quantity,\n        total: item.price - item.price * item.discount / 100\n      });\n\n      setCartItems([].concat(_toConsumableArray(cartItems), [_product]));\n    }\n  };\n\n  var removeFromCart = function removeFromCart(item) {\n    toast.error(\"Product Removed Successfully !\");\n    setCartItems(cartItems.filter(function (e) {\n      return e.id !== item.id;\n    }));\n  };\n\n  var minusQty = function minusQty() {\n    if (quantity > 1) {\n      setQuantity(quantity - 1);\n      setStock('InStock');\n    }\n  };\n\n  var plusQty = function plusQty(item) {\n    if (item.stock >= quantity) {\n      setQuantity(quantity + 1);\n    } else {\n      setStock(\"Out of Stock !\");\n    }\n  }; // Update Product Quantity\n\n\n  var updateQty = function updateQty(item, quantity) {\n    if (quantity >= 1) {\n      var index = cartItems.findIndex(function (itm) {\n        return itm.id === item.id;\n      });\n\n      if (index !== -1) {\n        var product = cartItems[index];\n        cartItems[index] = _objectSpread(_objectSpread(_objectSpread({}, product), item), {}, {\n          qty: quantity,\n          total: item.price * quantity\n        });\n        setCartItems(_toConsumableArray(cartItems));\n        toast.info(\"Product Quantity Updated !\");\n      } else {\n        var _product2 = _objectSpread(_objectSpread({}, item), {}, {\n          qty: quantity,\n          total: (item.price - item.price * item.discount / 100) * quantity\n        });\n\n        setCartItems([].concat(_toConsumableArray(cartItems), [_product2]));\n        toast.success(\"Product Added Updated !\");\n      }\n    } else {\n      toast.error(\"Enter Valid Quantity !\");\n    }\n  };\n\n  var value = props.value;\n  return __jsx(Context.Provider, {\n    value: _objectSpread(_objectSpread({}, props), {}, {\n      state: cartItems,\n      cartTotal: cartTotal,\n      setQuantity: setQuantity,\n      quantity: quantity,\n      stock: stock,\n      addToCart: addToCart,\n      removeFromCart: removeFromCart,\n      plusQty: plusQty,\n      minusQty: minusQty,\n      updateQty: updateQty\n    })\n  }, props.children);\n};\n\nexport default CartProvider;","map":null,"metadata":{},"sourceType":"module"}