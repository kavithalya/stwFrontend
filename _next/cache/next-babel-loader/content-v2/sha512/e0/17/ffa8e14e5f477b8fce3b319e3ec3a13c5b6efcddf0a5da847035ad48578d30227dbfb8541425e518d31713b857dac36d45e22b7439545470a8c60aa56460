{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment, useState, useContext } from \"react\";\nimport Slider from \"react-slick\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport ProductItem from '../product-box/ProductBox3';\nimport CartContext from '../../../helpers/cart/index';\nimport { Container, Media, Col, Row } from 'reactstrap';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport banner from '../../../public/assets/images/tools/banner.jpg';\nimport { CurrencyContext } from \"../../../helpers/Currency/CurrencyContext\";\nimport { Product4 } from \"../../../services/script\";\nimport { CompareContext } from \"../../../helpers/Compare/CompareContext\";\nimport LeftCollection from \"./LeftCollection\";\nconst GET_PRODUCTS = gql`\n      query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                stock\n                sale\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\nconst NewProduct = ({\n  type,\n  designClass,\n  cartClass,\n  spanClass\n}) => {\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState(type);\n  const context = useContext(CartContext);\n  const compareContext = useContext(CompareContext);\n  const curContext = useContext(CurrencyContext);\n  const symbol = curContext.state.symbol;\n  const wishListContext = useContext(WishlistContext);\n  var {\n    loading,\n    data\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: activeTab,\n      indexFrom: 0,\n      limit: 8\n    }\n  });\n  return __jsx(Fragment, null, __jsx(\"section\", {\n    className: \"tools_product\"\n  }, __jsx(Container, null, __jsx(Row, {\n    className: \"multiple-slider\"\n  }, __jsx(Col, {\n    xl: \"3\",\n    lg: \"4\",\n    md: \"12\"\n  }, __jsx(LeftCollection, {\n    type: type,\n    product: 4\n  })), __jsx(Col, {\n    xl: \"9\",\n    lg: \"8\",\n    md: \"12\",\n    className: designClass\n  }, __jsx(Container, {\n    className: \"p-0\"\n  }, __jsx(Tabs, {\n    className: \"theme-tab\"\n  }, __jsx(TabList, {\n    className: \"tabs tab-title\"\n  }, __jsx(Tab, {\n    className: activeTab == type ? 'active' : '',\n    onClick: () => setActiveTab(type)\n  }, \"New Products\"), __jsx(Tab, {\n    className: activeTab == 'furniture' ? 'active' : '',\n    onClick: () => setActiveTab('furniture')\n  }, \"Featured Products \")), __jsx(TabPanel, null, __jsx(Slider, _extends({}, Product4, {\n    className: \"product-4 product-m no-arrow\"\n  }), data && data.products.items.slice(0, 8).map((product, i) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addToCompare: () => compareContext.addToCompare(product),\n    addCart: () => context.addToCart(product),\n    key: i,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartClass: cartClass\n  })))), __jsx(TabPanel, null, __jsx(Slider, _extends({}, Product4, {\n    className: \"product-4 product-m no-arrow\"\n  }), data && data.products.items.slice(0, 8).map((product, i) => __jsx(ProductItem, {\n    product: product,\n    spanClass: spanClass,\n    addCart: () => context.addToCart(product),\n    key: i,\n    addWishlist: () => wishListContext.addToWish(product),\n    cartClass: cartClass\n  })))))), __jsx(\"div\", {\n    className: \"banner-tools\"\n  }, __jsx(Media, {\n    src: banner,\n    alt: \"\",\n    className: \"img-fluid\"\n  })))))));\n};\n\nexport default NewProduct;","map":null,"metadata":{},"sourceType":"module"}