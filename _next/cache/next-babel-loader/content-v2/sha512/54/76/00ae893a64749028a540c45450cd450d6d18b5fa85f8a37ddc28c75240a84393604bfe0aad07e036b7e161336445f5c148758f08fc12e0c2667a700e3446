{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Context from './index';\nimport { toast } from 'react-toastify';\n\nconst getLocalCartItems = () => {\n  try {\n    const list = localStorage.getItem('cartList');\n\n    if (list === null) {\n      return [];\n    } else {\n      return JSON.parse(list);\n    }\n  } catch (err) {\n    return [];\n  }\n};\n\nconst CartProvider = props => {\n  const {\n    0: cartItems,\n    1: setCartItems\n  } = useState(getLocalCartItems());\n  const {\n    0: cartTotal,\n    1: setCartTotal\n  } = useState(0);\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: stock,\n    1: setStock\n  } = useState('InStock');\n  useEffect(() => {\n    const Total = cartItems.reduce((a, b) => +a + +b.total, 0);\n    setCartTotal(Total);\n    localStorage.setItem('cartList', JSON.stringify(cartItems));\n  }, [cartItems]); // Add Product To Cart\n\n  const addToCart = (item, quantity) => {\n    toast.success(\"Product Added Successfully !\");\n    const index = cartItems.findIndex(itm => itm.id === item.id);\n\n    if (index !== -1) {\n      const product = cartItems[index];\n      cartItems[index] = _objectSpread(_objectSpread(_objectSpread({}, item), item), {}, {\n        qty: quantity,\n        total: (item.price - item.price * item.discount / 100) * quantity\n      });\n      setCartItems([...cartItems]);\n    } else {\n      const product = _objectSpread(_objectSpread({}, item), {}, {\n        qty: quantity,\n        total: item.price - item.price * item.discount / 100\n      });\n\n      setCartItems([...cartItems, product]);\n    }\n  };\n\n  const removeFromCart = item => {\n    toast.error(\"Product Removed Successfully !\");\n    setCartItems(cartItems.filter(e => e.id !== item.id));\n  };\n\n  const minusQty = () => {\n    if (quantity > 1) {\n      setQuantity(quantity - 1);\n      setStock('InStock');\n    }\n  };\n\n  const plusQty = item => {\n    if (item.stock >= quantity) {\n      setQuantity(quantity + 1);\n    } else {\n      setStock(\"Out of Stock !\");\n    }\n  }; // Update Product Quantity\n\n\n  const updateQty = (item, quantity) => {\n    if (quantity >= 1) {\n      const index = cartItems.findIndex(itm => itm.id === item.id);\n\n      if (index !== -1) {\n        const product = cartItems[index];\n        cartItems[index] = _objectSpread(_objectSpread(_objectSpread({}, product), item), {}, {\n          qty: quantity,\n          total: item.price * quantity\n        });\n        setCartItems([...cartItems]);\n        toast.info(\"Product Quantity Updated !\");\n      } else {\n        const product = _objectSpread(_objectSpread({}, item), {}, {\n          qty: quantity,\n          total: (item.price - item.price * item.discount / 100) * quantity\n        });\n\n        setCartItems([...cartItems, product]);\n        toast.success(\"Product Added Updated !\");\n      }\n    } else {\n      toast.error(\"Enter Valid Quantity !\");\n    }\n  };\n\n  const {\n    value\n  } = props;\n  return __jsx(Context.Provider, {\n    value: _objectSpread(_objectSpread({}, props), {}, {\n      state: cartItems,\n      cartTotal,\n      setQuantity,\n      quantity,\n      stock,\n      addToCart: addToCart,\n      removeFromCart: removeFromCart,\n      plusQty: plusQty,\n      minusQty: minusQty,\n      updateQty: updateQty\n    })\n  }, props.children);\n};\n\nexport default CartProvider;","map":null,"metadata":{},"sourceType":"module"}