{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Mani/Office/Template/StwEcommerce/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Mani\\\\Office\\\\Template\\\\StwEcommerce\\\\frontend\\\\components\\\\common\\\\Collections\\\\Collection12.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\\n            items {\\n                id\\n                title\\n                description\\n                type\\n                brand\\n                category \\n                price\\n                new\\n                sale\\n                stock\\n                discount\\n                variants{\\n                    id\\n                    sku\\n                    size\\n                    color\\n                    image_id\\n                }\\n                images{\\n                    image_id\\n                    id\\n                    alt\\n                    src\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment, useContext } from 'react';\nimport { Container } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport CartContext from '../../../helpers/cart';\nimport Masonry from 'react-masonry-css';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport ProductBox from '../product-box/ProductBox9';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\nvar GET_PRODUCTS = gql(_templateObject());\n\nvar ProductsCollection = function ProductsCollection(_ref) {\n  _s();\n\n  var type = _ref.type,\n      col = _ref.col;\n  var cartContext = useContext(CartContext);\n  var wishlistContext = useContext(WishlistContext);\n  var compareContext = useContext(CompareContext);\n  var quantity = cartContext.quantity;\n\n  var _useQuery = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      indexFrom: 0,\n      limit: 20\n    }\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(\"section\", {\n    className: \"portfolio-section portfolio-padding metro-section port-col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, __jsx(Container, {\n    fluid: col == 'full',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, __jsx(Masonry, {\n    breakpointCols: col == 'metro' ? 4 : 6,\n    className: \"isotopeContainer row\",\n    columnClassName: \"isotopeSelector \".concat(col == 'metro' ? 'col-xl-3 col-sm-6' : 'col-xl-2 col-lg-3 col-md-4 col-sm-6'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, data && data.products.items.slice(0, 20).map(function (product, index) {\n    return __jsx(ProductBox, {\n      product: product,\n      addCart: function addCart() {\n        return cartContext.addToCart(product, quantity);\n      },\n      addWish: function addWish() {\n        return wishlistContext.addToWish(product);\n      },\n      addCompare: function addCompare() {\n        return compareContext.addToCompare(product);\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    });\n  })))));\n};\n\n_s(ProductsCollection, \"KiZBW20p2KBiubonyXc/LTEFCVQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductsCollection;\nexport default ProductsCollection;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsCollection\");","map":{"version":3,"sources":["C:/Mani/Office/Template/StwEcommerce/frontend/components/common/Collections/Collection12.js"],"names":["React","Fragment","useContext","Container","useQuery","gql","CartContext","Masonry","WishlistContext","ProductBox","CompareContext","GET_PRODUCTS","ProductsCollection","type","col","cartContext","wishlistContext","compareContext","quantity","variables","indexFrom","limit","loading","data","products","items","slice","map","product","index","addToCart","addToWish","addToCompare"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AAEA,IAAMC,YAAY,GAAGN,GAAH,mBAAlB;;AAkCA,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,OAAmB;AAAA;;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC1C,MAAMC,WAAW,GAAGb,UAAU,CAACI,WAAD,CAA9B;AACA,MAAMU,eAAe,GAAGd,UAAU,CAACM,eAAD,CAAlC;AACA,MAAMS,cAAc,GAAGf,UAAU,CAACQ,cAAD,CAAjC;AACA,MAAMQ,QAAQ,GAAGH,WAAW,CAACG,QAA7B;;AAJ0C,kBAMlBd,QAAQ,CAACO,YAAD,EAAe;AAC3CQ,IAAAA,SAAS,EAAE;AACPN,MAAAA,IAAI,EAAEA,IADC;AAEPO,MAAAA,SAAS,EAAE,CAFJ;AAGPC,MAAAA,KAAK,EAAE;AAHA;AADgC,GAAf,CANU;AAAA,MAMpCC,OANoC,aAMpCA,OANoC;AAAA,MAM3BC,IAN2B,aAM3BA,IAN2B;;AAc1C,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAS,IAAA,SAAS,EAAC,4DAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAET,GAAG,IAAE,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,OAAD;AACI,IAAA,cAAc,EAAEA,GAAG,IAAE,OAAL,GAAc,CAAd,GAAiB,CADrC;AAEI,IAAA,SAAS,EAAC,sBAFd;AAGI,IAAA,eAAe,4BAAqBA,GAAG,IAAE,OAAL,GAAa,mBAAb,GAAkC,qCAAvD,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKS,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcC,KAAd,CAAoBC,KAApB,CAA0B,CAA1B,EAA6B,EAA7B,EAAiCC,GAAjC,CAAqC,UAACC,OAAD,EAAUC,KAAV;AAAA,WAC1C,MAAC,UAAD;AAAY,MAAA,OAAO,EAAED,OAArB;AACI,MAAA,OAAO,EAAE;AAAA,eAAMb,WAAW,CAACe,SAAZ,CAAsBF,OAAtB,EAA8BV,QAA9B,CAAN;AAAA,OADb;AAEI,MAAA,OAAO,EAAE;AAAA,eAAMF,eAAe,CAACe,SAAhB,CAA0BH,OAA1B,CAAN;AAAA,OAFb;AAGI,MAAA,UAAU,EAAE;AAAA,eAAMX,cAAc,CAACe,YAAf,CAA4BJ,OAA5B,CAAN;AAAA,OAHhB;AAG4D,MAAA,GAAG,EAAEC,KAHjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD0C;AAAA,GAArC,CALb,CADJ,CADJ,CADJ,CADJ;AAqBH,CAnCD;;GAAMjB,kB;UAMsBR,Q;;;KANtBQ,kB;AAqCN,eAAeA,kBAAf","sourcesContent":["import React, { Fragment, useContext } from 'react';\nimport { Container } from 'reactstrap';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport CartContext from '../../../helpers/cart';\nimport Masonry from 'react-masonry-css';\nimport { WishlistContext } from '../../../helpers/wishlist/WishlistContext';\nimport ProductBox from '../product-box/ProductBox9';\nimport { CompareContext } from '../../../helpers/Compare/CompareContext';\n\nconst GET_PRODUCTS = gql`\n    query  products($type:_CategoryType!,$indexFrom:Int! ,$limit:Int!) {\n        products (type: $type,indexFrom:$indexFrom ,limit:$limit){\n            items {\n                id\n                title\n                description\n                type\n                brand\n                category \n                price\n                new\n                sale\n                stock\n                discount\n                variants{\n                    id\n                    sku\n                    size\n                    color\n                    image_id\n                }\n                images{\n                    image_id\n                    id\n                    alt\n                    src\n                }\n            }\n        }\n    }\n`;\n\n\nconst ProductsCollection = ({ type, col }) => {\n    const cartContext = useContext(CartContext);\n    const wishlistContext = useContext(WishlistContext);\n    const compareContext = useContext(CompareContext);\n    const quantity = cartContext.quantity;\n\n    var { loading, data } = useQuery(GET_PRODUCTS, {\n        variables: {\n            type: type,\n            indexFrom: 0,\n            limit: 20\n        }\n    });\n\n    return (\n        <Fragment>\n            <section className=\"portfolio-section portfolio-padding metro-section port-col\">\n                <Container fluid={col=='full'}>\n                    <Masonry\n                        breakpointCols={col=='metro'? 4 :6}\n                        className=\"isotopeContainer row\"\n                        columnClassName={`isotopeSelector ${col=='metro'?'col-xl-3 col-sm-6': 'col-xl-2 col-lg-3 col-md-4 col-sm-6'}`}\n                    >\n                        {data && data.products.items.slice(0, 20).map((product, index) =>\n                            <ProductBox product={product}\n                                addCart={() => cartContext.addToCart(product,quantity)}\n                                addWish={() => wishlistContext.addToWish(product)}\n                                addCompare={() => compareContext.addToCompare(product)} key={index} />\n                        )}\n                    </Masonry>\n\n                </Container>\n            </section>\n        </Fragment>\n    )\n}\n\nexport default ProductsCollection;"]},"metadata":{},"sourceType":"module"}