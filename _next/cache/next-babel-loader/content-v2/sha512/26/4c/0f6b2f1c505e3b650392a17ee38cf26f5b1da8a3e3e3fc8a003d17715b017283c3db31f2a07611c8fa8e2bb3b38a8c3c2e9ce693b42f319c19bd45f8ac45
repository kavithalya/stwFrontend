{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport FilterContext from './FilterContext';\nimport { useRouter } from 'next/router';\n\nconst FilterProvider = props => {\n  const router = useRouter();\n  const brand = router.query.brand;\n  const color = router.query.color;\n  const size = router.query.size;\n  const category = router.query.category;\n  const min = router.query.min;\n  const max = router.query.max;\n  let sizeParam = size ? size.split(\",\") : null;\n  let param = brand ? brand.split(\",\") : [];\n  const {\n    0: selectedCategory,\n    1: setSelectedCategory\n  } = useState(category ? category : \"fashion\");\n  const {\n    0: selectedBrands,\n    1: setSelectedBrands\n  } = useState(param ? param : []);\n  const {\n    0: selectedColor,\n    1: setSelectedColor\n  } = useState(color ? color : \"\");\n  const {\n    0: selectedSize,\n    1: setSelectedSize\n  } = useState(sizeParam ? sizeParam : []);\n  const {\n    0: selectedPrice,\n    1: setSelectedPrice\n  } = useState({\n    min: min ? min : 0,\n    max: max ? max : 500\n  });\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(true);\n  const {\n    0: filterChecked,\n    1: setFilterChecked\n  } = useState([{}]);\n\n  const handleBrands = (brand, checked) => {\n    var index = selectedBrands.indexOf(brand);\n\n    if (index > -1) {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        brand,\n        checked\n      }]);\n      setSelectedBrands(selectedBrands.filter(e => e !== brand));\n    } else {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        brand,\n        checked\n      }]);\n      setSelectedBrands([...selectedBrands, brand]);\n    }\n  };\n\n  const handleSizes = (size, checked) => {\n    var index = selectedSize.indexOf(size);\n\n    if (index > -1) {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        size,\n        checked\n      }]);\n      setSelectedSize(selectedSize.filter(e => e !== size));\n    } else {\n      setIsChecked(!isChecked);\n      setFilterChecked([{\n        size,\n        checked\n      }]);\n      setSelectedSize([...selectedSize, size]);\n    }\n  };\n\n  return __jsx(FilterContext.Provider, {\n    value: _objectSpread(_objectSpread({}, props), {}, {\n      state: selectedCategory,\n      setFilterChecked,\n      setSelectedColor,\n      setSelectedCategory,\n      setSelectedBrands,\n      selectedBrands,\n      selectedColor,\n      selectedPrice,\n      isChecked,\n      filterChecked,\n      selectedSize,\n      setSelectedSize,\n      setSelectedPrice,\n      handleBrands: handleBrands,\n      handleSizes: handleSizes\n    })\n  }, props.children);\n};\n\nexport default FilterProvider;","map":null,"metadata":{},"sourceType":"module"}